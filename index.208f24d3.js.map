{"mappings":"A,I,E,E,C,EEoPA,EAlPA,MAME,YAAY,CAAY,CAAE,CACxB,IAAI,CAAC,KAAK,CAAG,GAAgB,CAC3B,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,aAAa,CAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE3D,CAEA,UAAW,CACT,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAS,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAE/C,IAAK,IAAI,EAAM,EAAG,EAAM,EAAO,MAAM,CAAG,EAAG,IACrC,CAAM,CAAC,EAAI,GAAK,CAAM,CAAC,EAAM,EAAE,GACjC,CAAM,CAAC,EAAI,EAAI,EACf,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAI,CACzB,CAAM,CAAC,EAAM,EAAE,CAAG,EAClB,EAAQ,CAAA,GAMZ,IAFA,EAAS,EAAO,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAE3B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAIX,GACA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,KAAK,CAAC,CAAC,EAAO,IAAU,IAAU,CAAM,CAAC,EAAM,GAEhE,CAAA,EAAQ,CAAA,CAJV,EAOA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,CACpB,CAMA,OAJI,GACF,IAAI,CAAC,YAAY,GAGZ,CACT,CAEA,WAAY,CACV,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,OAAO,IAEhD,IAAM,EAAQ,IAAI,CAAC,QAAQ,GAI3B,OAFA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,OAAO,IAEzC,CACT,CAEA,QAAS,CACP,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAS,EAAE,CAEf,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAIpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,EAAQ,CAAA,GAMZ,IAFA,EAAS,EAAO,MAAM,CAAC,AAAC,GAAU,AAAU,IAAV,GAE3B,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAM,CAAC,EAAI,EACtC,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAM,CAAC,EAAI,AAEtC,CAMA,OAJI,GACF,IAAI,CAAC,YAAY,GAGZ,CACT,CAEA,UAAW,CACT,IAAI,CAAC,CAAA,CAAe,GAEpB,IAAM,EAAQ,IAAI,CAAC,MAAM,GAIzB,OAFA,IAAI,CAAC,CAAA,CAAe,GAEb,CACT,CAEA,CAAA,CAAe,GACb,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAM,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,AAEjC,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,IAAI,CAAC,KAAK,CAAC,EAAI,EAAI,CAAC,EAAI,CAC/C,IAAI,CAAC,KAAK,CAAC,EAAI,EAAI,CAAC,EAAI,CAAG,CAC7B,CAEJ,CAIA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,UAAW,CACL,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,QACxC,CAAA,IAAI,CAAC,MAAM,CAAG,KADhB,CAGF,CAEA,YAAa,CACX,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,IACxC,MAAO,CAAA,EAGT,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAEpC,GAAI,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAI/C,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EAI/C,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EAI/C,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CAXjD,MAAO,CAAA,CAcX,CAGF,MAAO,CAAA,CACT,CAEA,OAAQ,CACN,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,UAEd,IAAI,CAAC,YAAY,GACjB,IAAI,CAAC,YAAY,EACnB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,cAAe,CACb,IAAM,EAAa,EAAE,CAGrB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAEzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACI,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,GAAM,CAAA,IAAE,CAAG,CAAA,IAAE,CAAG,CAAE,CAChB,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CACF,ED9OA,AAyHA,SAAoB,CAAG,EACrB,IAAM,EAAO,SAAS,aAAa,CAAC,OAEpC,CAAA,EAAK,GAAG,CAAG,OACX,EAAK,IAAI,CAAG,EACZ,EAAK,YAAY,CAAC,OAAQ,aAG1B,IAAM,EAAkB,SAAS,aAAa,CAAC,oBAE3C,GACF,SAAS,IAAI,CAAC,WAAW,CAAC,GAG5B,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,EAxIW,uBAEX,MAAM,EAAO,G,C,C,EAAI,I,E,U,C,E,O,C,C,EACX,EAAS,SAAS,aAAa,CAAC,WAChC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAe,SAAS,aAAa,CAAC,kBA2E5C,SAAS,EAAY,CAAI,EACvB,IAAM,EAAQ,EAAK,QAAQ,GACrB,EAAQ,SAAS,gBAAgB,CAAC,eAExC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAEhC,IAAM,EAAO,CAAK,CADA,AAAM,EAAN,EAAU,EACC,AAEzB,AAAoB,CAAA,IAApB,CAAK,CAAC,EAAI,CAAC,EAAI,EACjB,EAAK,WAAW,CAAG,GACnB,EAAK,SAAS,CAAG,eAEjB,EAAK,WAAW,CAAG,CAAK,CAAC,EAAI,CAAC,EAAI,CAClC,EAAK,SAAS,CAAG,CAAC,uBAAuB,EAAE,CAAK,CAAC,EAAI,CAAC,EAAI,CAAC,CAAC,CAEhE,CAGF,IAAM,EAAe,SAAS,aAAa,CAAC,eACtC,EAAQ,EAAK,QAAQ,EAE3B,CAAA,EAAa,SAAS,CAAG,GACzB,EAAa,WAAW,CAAG,CAC7B,CAEA,SAAS,EAAc,CAAI,EACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAa,SAAS,CAAC,GAAG,CAAC,UAEvB,AAAS,QAAT,EACF,EAAW,SAAS,CAAC,MAAM,CAAC,UACnB,AAAS,SAAT,EACT,EAAY,SAAS,CAAC,MAAM,CAAC,UACX,UAAT,GACT,EAAa,SAAS,CAAC,MAAM,CAAC,SAElC,CA/GA,EAAO,gBAAgB,CAAC,QAAS,KAC3B,EAAO,SAAS,CAAC,QAAQ,CAAC,UAC5B,EAAK,KAAK,GACV,EAAY,GACZ,IACA,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,SAAS,CAAC,GAAG,CAAC,WACrB,EAAO,WAAW,CAAG,YAErB,EAAK,OAAO,GACZ,EAAY,GACZ,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,SAAS,CAAC,GAAG,CAAC,SACrB,EAAO,WAAW,CAAG,QACrB,EAAc,SAElB,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,EAAE,gBAAgB,EAAI,AAAqB,YAArB,EAAK,SAAS,GACtC,OAGF,IAAI,EAAQ,CAAA,EAEZ,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAQ,EAAK,QAAQ,GACrB,KACF,KAAK,aACH,EAAQ,EAAK,SAAS,GACtB,KACF,KAAK,UACH,EAAQ,EAAK,MAAM,GACnB,KACF,KAAK,YACH,EAAQ,EAAK,QAAQ,GACrB,KACF,SACE,MACJ,CAEA,GAAI,EAAO,CAST,GARA,EAAY,GAER,EAAO,SAAS,CAAC,QAAQ,CAAC,WAC5B,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,SAAS,CAAC,GAAG,CAAC,WACrB,EAAO,WAAW,CAAG,WAGnB,EAAK,QAAQ,GAAI,CACnB,EAAc,OACd,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,SAAS,CAAC,GAAG,CAAC,SACrB,EAAO,WAAW,CAAG,QAErB,MACF,CAEA,GAAI,EAAK,UAAU,GAAI,CACrB,EAAc,QAKd,MACF,CACF,CAEA,EAAE,cAAc,EAClB","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable no-shadow */ var $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Створює новий екземпляр гри 2048.\n   * @param {number[][]} initialValue - Початковий стан поля (4x4 матриця).\n   * Якщо не задано, поле ініціалізується порожнім.\n   */ constructor(initialValue){\n        this.board = initialValue || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.previousState = JSON.parse(JSON.stringify(this.board));\n    // this.isNewTileGenerated = false;\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            let newRow = this.board[row].filter((value)=>value !== 0);\n            for(let col = 0; col < newRow.length - 1; col++)if (newRow[col] === newRow[col + 1]) {\n                newRow[col] *= 2;\n                this.score += newRow[col];\n                newRow[col + 1] = 0;\n                moved = true;\n            }\n            newRow = newRow.filter((value)=>value !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            if (!moved && !this.board[row].every((value, index)=>value === newRow[index])) moved = true;\n            this.board[row] = newRow;\n        }\n        if (moved) this.generateTile();\n        return moved;\n    }\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse());\n        const moved = this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n        return moved;\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) column.push(this.board[row][col]);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column[i + 1] = 0;\n                moved = true;\n            }\n            column = column.filter((value)=>value !== 0);\n            while(column.length < 4)column.push(0);\n            for(let row = 0; row < 4; row++){\n                if (this.board[row][col] !== column[row]) moved = true;\n                this.board[row][col] = column[row];\n            }\n        }\n        if (moved) this.generateTile();\n        return moved;\n    }\n    moveDown() {\n        this.#reverseColumns();\n        const moved = this.moveUp();\n        this.#reverseColumns();\n        return moved;\n    }\n    #reverseColumns() {\n        for(let col = 0; col < 4; col++)for(let row = 0; row < 2; row++){\n            const temp = this.board[row][col];\n            this.board[row][col] = this.board[3 - row][col];\n            this.board[3 - row][col] = temp;\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    isWinner() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    isGameOver() {\n        if (this.board.some((row)=>row.includes(0))) return false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.board[row][col];\n            if (col < 3 && current === this.board[row][col + 1]) return false;\n            if (row < 3 && current === this.board[row + 1][col]) return false;\n            if (row < 3 && current === this.board[row + 1][col]) return false;\n            if (row > 0 && current === this.board[row - 1][col]) return false;\n        }\n        return true;\n    }\n    start() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"playing\";\n        this.generateTile();\n        this.generateTile();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    generateTile() {\n        const emptyCells = [];\n        // eslint-disable-next-line no-shadow\n        for(let row = 0; row < 4; row++){\n            // eslint-disable-next-line no-shadow\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\n$09e991522ca7e64e$var$addFavicon(\"/images/favicon.png\");\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game);\n        $09e991522ca7e64e$var$updateMessage();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game);\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$updateMessage(\"start\");\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (e.defaultPrevented || $09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    let moved = false;\n    switch(e.key){\n        case \"ArrowLeft\":\n            moved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    if (moved) {\n        $09e991522ca7e64e$var$renderBoard($09e991522ca7e64e$var$game);\n        if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n            $09e991522ca7e64e$var$button.classList.remove(\"start\");\n            $09e991522ca7e64e$var$button.classList.add(\"restart\");\n            $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        }\n        if ($09e991522ca7e64e$var$game.isWinner()) {\n            $09e991522ca7e64e$var$updateMessage(\"win\");\n            $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n            $09e991522ca7e64e$var$button.classList.add(\"start\");\n            $09e991522ca7e64e$var$button.textContent = \"Start\";\n            return;\n        }\n        if ($09e991522ca7e64e$var$game.isGameOver()) {\n            $09e991522ca7e64e$var$updateMessage(\"lose\");\n            // button.classList.remove('restart');\n            // button.classList.add('start');\n            // button.textContent = 'Start';\n            return;\n        }\n    }\n    e.preventDefault();\n});\nfunction $09e991522ca7e64e$var$renderBoard(game) {\n    const board = game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n        const cellIndex = row * 4 + col;\n        const cell = cells[cellIndex];\n        if (board[row][col] === 0) {\n            cell.textContent = \"\";\n            cell.className = \"field-cell\";\n        } else {\n            cell.textContent = board[row][col];\n            cell.className = `field-cell field-cell--${board[row][col]}`;\n        }\n    }\n    const scoreElement = document.querySelector(\".game-score\");\n    const score = game.getScore();\n    scoreElement.innerHTML = \"\";\n    scoreElement.textContent = score;\n}\nfunction $09e991522ca7e64e$var$updateMessage(type) {\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    if (type === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (type === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if (type === \"start\") $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$addFavicon(url) {\n    const link = document.createElement(\"link\");\n    link.rel = \"icon\";\n    link.href = url;\n    link.setAttribute(\"type\", \"image/png\");\n    // Remove any existing favicons\n    const existingFavicon = document.querySelector(\"link[rel='icon']\");\n    if (existingFavicon) document.head.removeChild(existingFavicon);\n    document.head.appendChild(link);\n}\n\n\n//# sourceMappingURL=index.208f24d3.js.map\n","/* eslint-disable no-shadow */\n'use strict';\n\nimport Game from '../modules/Game.class.js';\naddFavicon('/images/favicon.png');\n\nconst game = new Game();\nconst button = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n    renderBoard(game);\n    updateMessage();\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    game.restart();\n    renderBoard(game);\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    updateMessage('start');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.defaultPrevented || game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  if (moved) {\n    renderBoard(game);\n\n    if (button.classList.contains('start')) {\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.textContent = 'Restart';\n    }\n\n    if (game.isWinner()) {\n      updateMessage('win');\n      button.classList.remove('restart');\n      button.classList.add('start');\n      button.textContent = 'Start';\n\n      return;\n    }\n\n    if (game.isGameOver()) {\n      updateMessage('lose');\n      // button.classList.remove('restart');\n      // button.classList.add('start');\n      // button.textContent = 'Start';\n\n      return;\n    }\n  }\n\n  e.preventDefault();\n});\n\nfunction renderBoard(game) {\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 4; col++) {\n      const cellIndex = row * 4 + col;\n      const cell = cells[cellIndex];\n\n      if (board[row][col] === 0) {\n        cell.textContent = '';\n        cell.className = 'field-cell';\n      } else {\n        cell.textContent = board[row][col];\n        cell.className = `field-cell field-cell--${board[row][col]}`;\n      }\n    }\n  }\n\n  const scoreElement = document.querySelector('.game-score');\n  const score = game.getScore();\n\n  scoreElement.innerHTML = '';\n  scoreElement.textContent = score;\n}\n\nfunction updateMessage(type) {\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  if (type === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (type === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (type === 'start') {\n    messageStart.classList.remove('hidden');\n  }\n}\n\nfunction addFavicon(url) {\n  const link = document.createElement('link');\n\n  link.rel = 'icon';\n  link.href = url;\n  link.setAttribute('type', 'image/png');\n\n  // Remove any existing favicons\n  const existingFavicon = document.querySelector(\"link[rel='icon']\");\n\n  if (existingFavicon) {\n    document.head.removeChild(existingFavicon);\n  }\n\n  document.head.appendChild(link);\n}\n","'use strict';\n\nclass Game {\n  /**\n   * Створює новий екземпляр гри 2048.\n   * @param {number[][]} initialValue - Початковий стан поля (4x4 матриця).\n   * Якщо не задано, поле ініціалізується порожнім.\n   */\n  constructor(initialValue) {\n    this.board = initialValue || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n    this.previousState = JSON.parse(JSON.stringify(this.board));\n    // this.isNewTileGenerated = false;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.board[row].filter((value) => value !== 0);\n\n      for (let col = 0; col < newRow.length - 1; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          newRow[col] *= 2;\n          this.score += newRow[col];\n          newRow[col + 1] = 0;\n          moved = true;\n        }\n      }\n\n      newRow = newRow.filter((value) => value !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (\n        !moved &&\n        !this.board[row].every((value, index) => value === newRow[index])\n      ) {\n        moved = true;\n      }\n\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n\n    const moved = this.moveLeft();\n\n    this.board = this.board.map((row) => row.reverse());\n\n    return moved;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          column.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column[i + 1] = 0;\n          moved = true;\n        }\n      }\n\n      column = column.filter((value) => value !== 0);\n\n      while (column.length < 4) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== column[row]) {\n          moved = true;\n        }\n        this.board[row][col] = column[row];\n      }\n    }\n\n    if (moved) {\n      this.generateTile();\n    }\n\n    return moved;\n  }\n\n  moveDown() {\n    this.#reverseColumns();\n\n    const moved = this.moveUp();\n\n    this.#reverseColumns();\n\n    return moved;\n  }\n\n  #reverseColumns() {\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 2; row++) {\n        const temp = this.board[row][col];\n\n        this.board[row][col] = this.board[3 - row][col];\n        this.board[3 - row][col] = temp;\n      }\n    }\n  }\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  isWinner() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n  }\n\n  isGameOver() {\n    if (this.board.some((row) => row.includes(0))) {\n      return false;\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.board[row][col];\n\n        if (col < 3 && current === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && current === this.board[row + 1][col]) {\n          return false;\n        }\n\n        if (row < 3 && current === this.board[row + 1][col]) {\n          return false;\n        }\n\n        if (row > 0 && current === this.board[row - 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'playing';\n\n    this.generateTile();\n    this.generateTile();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  generateTile() {\n    const emptyCells = [];\n\n    // eslint-disable-next-line no-shadow\n    for (let row = 0; row < 4; row++) {\n      // eslint-disable-next-line no-shadow\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row, col } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","constructor","initialValue","board","score","status","previousState","JSON","parse","stringify","moveLeft","moved","row","newRow","filter","value","col","length","push","every","index","generateTile","moveRight","map","reverse","moveUp","column","i","moveDown","temp","getScore","getState","getStatus","isWinner","some","includes","isGameOver","current","start","restart","emptyCells","Math","floor","random","$09e991522ca7e64e$var$addFavicon","url","link","document","createElement","rel","href","setAttribute","existingFavicon","querySelector","head","removeChild","appendChild","$09e991522ca7e64e$var$game","__esModule","default","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$renderBoard","game","cells","querySelectorAll","cell","textContent","className","scoreElement","innerHTML","$09e991522ca7e64e$var$updateMessage","type","classList","add","remove","addEventListener","contains","e","defaultPrevented","key","preventDefault"],"version":3,"file":"index.208f24d3.js.map"}